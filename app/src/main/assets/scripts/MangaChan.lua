---
--- Generated by Luanalysis
--- Created by Аlex Bayir.
--- DateTime: 09.01.2022 21:22
---

version="1.4"
domain="manga-chan.me"
source="MangaChan"
Type="Manga"
description="Тоже хороший источник манги. Но часто падает, из-за чего бывает недоступен от нескольких часов до пары дней."
host="https://"..domain
auth_tokens={"PHPSESSID"}

Genres={["18 плюс"]="18_плюс",["bdsm"]="bdsm",["арт"]="арт",["боевик"]="боевик",["боевые искусства"]="боевые_искусства",["вампиры"]="вампиры",["веб"]="веб",["гарем"]="гарем",["гендерная интрига"]="гендерная_интрига",["героическое фэнтези"]="героическое_фэнтези",["детектив"]="детектив",["дзёсэй"]="дзёсэй",["додзинси"]="додзинси",["драма"]="драма",["игра"]="игра",["инцест"]="инцест",["искусство"]="искусство",["история"]="история",["киберпанк"]="киберпанк",["кодомо"]="кодомо",["комедия"]="комедия",["литРПГ"]="литРПГ",["махо-сёдзё"]="махо-сёдзё",["меха"]="меха",["мистика"]="мистика",["музыка"]="музыка",["научная фантастика"]="научная_фантастика",["омегаверс"]="омегаверс",["повседневность"]="повседневность",["постапокалиптика"]="постапокалиптика",["приключения"]="приключения",["психология"]="психология",["романтика"]="романтика",["самурайский боевик"]="самурайский_боевик",["сборник"]="сборник",["сверхъестественное"]="сверхъестественное",["сказка"]="сказка",["спорт"]="спорт",["супергерои"]="супергерои",["сэйнэн"]="сэйнэн",["сёдзё"]="сёдзё",["сёдзё-ай"]="сёдзё-ай",["сёнэн"]="сёнэн",["сёнэн-ай"]="сёнэн-ай",["танцы"]="танцы",["трагедия"]="трагедия",["триллер"]="триллер",["ужасы"]="ужасы",["фантастика"]="фантастика",["фурри"]="фурри",["фэнтези"]="фэнтези",["школа"]="школа",["эротика"]="эротика",["юри"]="юри",["ёнкома"]="ёнкома"}
Sorts={["Популярность"]="fav",["Дата"]="date",["Алфавит"]="abc"}
sorts={[1]="fav",[2]="date",[3]=nil}
Order={["По убыванию"]="desc",["По возрастанию"]="asc"}

function update(url)
    local e=network:load_as_Document(url):body():selectFirst("div.main_fon")
    local list=e:select("table.table_cha"):select("tr")
    local chapters={}; local n=0
    for i=list:size()-1,0,-1 do
        local el=list:get(i)
        if(el:className():len()>0) then
            local href=utils:attr(el:selectFirst("a"),"href","")
            chapters[n]=(Chapter.new(num(href:match("v%D?(%d+)")),num(href:match("ch%D?(%d+)")),utils:text(el:selectFirst("a"),""):match("%s%s%s+(.*)"),utils:parseDate(utils:text(el:selectFirst("div.date")),"yyyy-MM-dd"),utils:to_map({id=num(href:match("%d+"))})))
            n=n+1
        end
    end
    local author={}; local authors=e:select("a[href~=/mangaka/\\d+]")
    for j=0,authors:size()-1,1 do
        local a=authors:get(j); author[a:attr("title")]=a:attr("abs:href")
    end
    return {
        ["url"]=url,
        ["url_web"]=url,
        ["name"]=utils:text(e:selectFirst("a.title_top_a"),""):gsub(" - часть %d+",""):gsub(" - глава %d+",""):match("([a-zA-Z][^а-яА-Я]*[a-zA-Z])"),
        ["name_alt"]=utils:text(e:selectFirst("a.title_top_a"),""):gsub(" - часть %d+",""):gsub(" - глава %d+",""):match("([а-яА-Я].*[а-яА-Я])"),
        ["author"]=author,
        ["genres"]=utils:attr(e:select("li.sidetag"):select("a[href*=/tags/-]"),"href","",", "):gsub("/tags/%-",""):gsub("_"," "),
        ["description"]=utils:text(e:selectFirst("div#description")),
        ["thumbnail"]=utils:attr(e:selectFirst("img#cover"),"src"),
        ["chapters"]=chapters
    }
end

function query(name,page,params)
    local url;
    if(name~=nil and name:len()>0) then
        url=network:url_builder(host.."/"):add("do","search"):add("subaction","search"):add("story",name):add("offset",page>0 and (page+1)*10 or nil):build();
    else
        if(params~=nil and #params>0 and type(params[1])=="userdata" and Options:equals(params[1]:getClass()))then
            if(params~=nil and #params>0) then
                url=host.."/manga/new&n="..params[1]:getSelected()[1]..params[1]:getTitleSortSelected()
                s=params[2]~=nil and params[2]:getSelected() or nil
                d=params[2]~=nil and params[2]:getDeselected() or nil
                if((s~=nil and #s>0) or (d~=nil and #d>0)) then
                    url=host.."/tags/"; local b=false
                    for i=1,(s~=nil and #s or 0),1 do
                        url=url..(b and "+" or "")..s[i]; b=true
                    end
                    for i=1,(d~=nil and #d or 0),1 do
                        url=url..(b and "+-" or "")..d[i]; b=true
                    end
                    url=url.."&sort=manga".."&n="..params[1]:getSelected()[1]..params[1]:getTitleSortSelected()
                end
            end
        elseif(params~=nil and #params>0)then
            url=sorts[params[1]]~=nil and host.."/manga/new&n="..sorts[params[1]] or host.."/manga/random"
        end
        url=url~=nil and url..(page>0 and ("?offset="..((page+1)*10)) or "")
    end
    if(name~=nil and name:match("[a-z]://[^ >,;]*")~=nil) then url=name; end
    return query_url(url)
end

function query_url(url,page)
    if page then url=url:find("page") and url:gsub("offset=%d+","offset="..tostring((page+1)*10)) or url.."&offset="..tostring((page+1)*10) end
    print(url)
    local selects=network:load_as_Document(url):select("div.content_row")
    local list={}; local n=0
    for i=0,selects:size()-1,1 do
        local e=selects:get(i)
        if(utils:attr(e:selectFirst("h2"):selectFirst("a"),"href"):match("/manga.*")) then
            local author={}; local authors=e:select("a[href~=/mangaka/\\d+]")
            for j=0,authors:size()-1,1 do
                local a=authors:get(j); author[a:attr("title")]=a:attr("abs:href")
            end
            list[n]={
                ["url"]=utils:attr(e:selectFirst("h2"):selectFirst("a"),"abs:href"),
                ["url_web"]=utils:attr(e:selectFirst("h2"):selectFirst("a"),"abs:href"),
                ["name"]=utils:text(e:selectFirst("h2"),""):gsub(" - часть %d+",""):gsub(" - глава %d+",""):match("([a-zA-Z][^а-яА-Я]*[a-zA-Z])"),
                ["name_alt"]=utils:text(e:selectFirst("h2"),""):gsub(" - часть %d+",""):gsub(" - глава %d+",""):match("([а-яА-Я].*[а-яА-Я])"),
                ["author"]=author,
                ["genres"]=utils:text(e:select("div.genre"),""):gsub("_"," "),
                ["description"]=utils:text(e:select("div.tags")),
                ["thumbnail"]=select(1, utils:attr(e:selectFirst("img"),"src"):gsub("_blur",""))
            }
            n=n+1
        end
    end
    return list
end

function getPages(url,chapter) -- table <Page>
    local array=JSONArray:create(network:load_as_Document(host.."/online/"..chapter["id"]..url:match("%d+(.*)%d*%.")..chapter["num"]..".html"):select("script"):toString():match("\"fullimg\":%s*(%[.-%])"):gsub("'","\""))
    local pages={}
    for i=0,array:size()-1,1 do
        pages[i]=Page.new(i+1,array:getString(i))
    end
    return pages
end

function createAdvancedSearchOptions() -- table <Options>
    return {
        Options.new("Сортировка","desc","asc",utils:to_map(Sorts),0),
        Options.new("Жанры",utils:to_map(Genres),2)
    }
end

function loadSimilar(manga)
    local elements=network:load_as_Document((manga["url"]:gsub("manga/","related/"))):select("div.related")
    local similar={}; local n=0
    for i=0,(elements~=nil and elements:size() or 0)-1,1 do
        local e=elements:get(i)
        similar[n]=e and {
            ["url"]=utils:attr(e:selectFirst("h2"):selectFirst("a"),"abs:href"),
            ["url_web"]=utils:attr(e:selectFirst("h2"):selectFirst("a"),"abs:href"),
            ["name"]=utils:text(e:selectFirst("h2"),""):match("[a-zA-Z].*[a-zA-Z]"),
            ["name_alt"]=utils:text(e:selectFirst("h2"),""):match("[а-яА-Я].*[а-яА-Я]"),
            ["author"]=JSONObject.new():put(utils:text(e:select("div.related_row"):get(1):selectFirst("a")),utils:attr(e:select("div.related_row"):get(1):selectFirst("a"),"abs:href")),
            ["genres"]=utils:text(e:select("div.genre")),
            ["description"]=utils:text(e:select("div.tags")),
            ["thumbnail"]="https://"..utils:attr(e:selectFirst("img"),"src"):match("/manga.*"):gsub("_blur","")
        }
        n=n+(e and 1 or 0)
    end
    return similar
end