---
--- Generated by Luanalysis
--- Created by Аlex Bayir.
--- DateTime: 09.01.2022 21:22
---
Wrapper=luajava.bindClass("org.alex.kitsune.manga.Wrapper")
Chapter=luajava.bindClass("org.alex.kitsune.manga.Chapter")
Page=luajava.bindClass("org.alex.kitsune.manga.Page")
Options=luajava.bindClass("org.alex.kitsune.manga.search.Options")
UrlBuilder=luajava.bindClass("org.alex.kitsune.commons.URLBuilder")
JSONObject=luajava.bindClass("org.json.JSONObject")
JSONArray=luajava.bindClass("org.json.JSONArray")
ArrayList=luajava.bindClass("java.util.ArrayList")
Map_class=luajava.bindClass("java.util.TreeMap")

version="1.2"
provider="manga-chan.me"
providerName="MangaChan"
sourceDescription="Тоже хороший источник манги. Но часто падает, из-за чего бывает недоступен от нескольких часов до пары дней."
host="https://"..provider

Genres={["18 плюс"]="18_плюс",["bdsm"]="bdsm",["арт"]="арт",["боевик"]="боевик",["боевые искусства"]="боевые_искусства",["вампиры"]="вампиры",["веб"]="веб",["гарем"]="гарем",["гендерная интрига"]="гендерная_интрига",["героическое фэнтези"]="героическое_фэнтези",["детектив"]="детектив",["дзёсэй"]="дзёсэй",["додзинси"]="додзинси",["драма"]="драма",["игра"]="игра",["инцест"]="инцест",["искусство"]="искусство",["история"]="история",["киберпанк"]="киберпанк",["кодомо"]="кодомо",["комедия"]="комедия",["литРПГ"]="литРПГ",["махо-сёдзё"]="махо-сёдзё",["меха"]="меха",["мистика"]="мистика",["музыка"]="музыка",["научная фантастика"]="научная_фантастика",["омегаверс"]="омегаверс",["повседневность"]="повседневность",["постапокалиптика"]="постапокалиптика",["приключения"]="приключения",["психология"]="психология",["романтика"]="романтика",["самурайский боевик"]="самурайский_боевик",["сборник"]="сборник",["сверхъестественное"]="сверхъестественное",["сказка"]="сказка",["спорт"]="спорт",["супергерои"]="супергерои",["сэйнэн"]="сэйнэн",["сёдзё"]="сёдзё",["сёдзё-ай"]="сёдзё-ай",["сёнэн"]="сёнэн",["сёнэн-ай"]="сёнэн-ай",["танцы"]="танцы",["трагедия"]="трагедия",["триллер"]="триллер",["ужасы"]="ужасы",["фантастика"]="фантастика",["фурри"]="фурри",["фэнтези"]="фэнтези",["школа"]="школа",["эротика"]="эротика",["юри"]="юри",["ёнкома"]="ёнкома"}
Sorts={["Популярность"]="fav",["Дата"]="date",["Алфавит"]="abc"}
sorts={[1]="fav",[2]="date",[3]=nil}
Order={["По убыванию"]="desc",["По возрастанию"]="asc"}

function update(url) -- Wrapper
    local e=Wrapper:loadDocument(url):body()
    local list=e:select("table.table_cha"):select("tr")
    local chapters=ArrayList.new(list:size())
    for i=list:size()-1,0,-1 do
        local tmp=list:get(i)
        if(tmp:className():len()>0) then
            href=Wrapper:attr(tmp:selectFirst("a"),"href","")
            chapters:add(Chapter.new(num(href:match("%d+")),num(href:match("v%D?(%d+)")),num(href:match("ch%D?(%d+)")),Wrapper:text(tmp:selectFirst("a"),""):match("%s%s%s+(.*)"),Wrapper:parseDate(Wrapper:text(tmp:selectFirst("div.date")),"yyyy-MM-dd")))
        end
    end

    return Wrapper.new(
            url,
            num(Wrapper:attr(e:selectFirst("a.title_top_a"),"href"):match("%d+")),
            Wrapper:text(e:selectFirst("a.title_top_a"),""):match("[a-zA-Z].*[a-zA-Z]"),
            Wrapper:text(e:selectFirst("a.title_top_a"),""):match("[а-яА-Я].*[а-яА-Я]"),
            Wrapper:text(e:select("tr"):get(2):selectFirst("a")),
            Wrapper:attr(e:select("tr"):get(2):selectFirst("a"),"abs:href"),
            Wrapper:text(e:select("li.sidetag"),""):gsub("%s?%+%s%-%s",", "):sub(3),
            0,
            (select(1,Wrapper:text(e:select("table.mangatitle"):select("tr"):select("h2"):get(2),""):gsub(".*, выпуск ",""))),
            Wrapper:text(e:selectFirst("div#description")),
            Wrapper:attr(e:selectFirst("img#cover"),"src"),
            url,
            chapters
    )
end
function query(name,page,params) -- java.util.ArrayList<Wrapper>
    local url;
    if(name~=nil and name:len()>0) then
        url=UrlBuilder.new(host.."/"):addParam("do","search"):addParam("subaction","search"):addParam("story",name):addParam("offset",page>0 and (page+1)*10 or nil):getUrl();
    else
        if(params~=nil and #params>0 and type(params[1])=="userdata" and Options:equals(params[1]:getClass()))then
            if(params~=nil and #params>0) then
                url=host.."/manga/new&n="..params[1]:getSelected()[1]..params[1]:getTitleSortSelected()
                s=params[2]~=nil and params[2]:getSelected() or nil
                d=params[2]~=nil and params[2]:getDeselected() or nil
                if((s~=nil and #s>0) or (d~=nil and #d>0)) then
                    url=host.."/tags/"; local b=false
                    for i=1,(s~=nil and #s or 0),1 do
                        url=url..(b and "+" or "")..s[i]; b=true
                    end
                    for i=1,(d~=nil and #d or 0),1 do
                        url=url..(b and "+-" or "")..d[i]; b=true
                    end
                    url=url.."&sort=manga".."&n="..params[1]:getSelected()[1]..params[1]:getTitleSortSelected()
                end
            end
        elseif(params~=nil and #params>0)then
            url=sorts[params[1]]~=nil and host.."/manga/new&n="..sorts[params[1]] or host.."/manga/random"
        end
        url=url~=nil and url..(page>0 and ("?offset="..((page+1)*10)) or "")
    end
    if(name~=nil and name:match("[a-z]://[^ >,;]*")~=nil) then url=name; end
    print(url)
    local selects=Wrapper:loadDocument(url):select("div.content_row")
    local list=ArrayList.new(selects:size())
    for i=0,selects:size()-1,1 do
        local e=selects:get(i)
        list:add(Wrapper.new(
                Wrapper:attr(e:selectFirst("h2"):selectFirst("a"),"abs:href"),
                0,
                Wrapper:text(e:selectFirst("h2"),""):match("[a-zA-Z].*[a-zA-Z]"),
                Wrapper:text(e:selectFirst("h2"),""):match("[а-яА-Я].*[а-яА-Я]"),
                Wrapper:text(e:selectFirst("div.manga_row2"):selectFirst("a")),
                Wrapper:attr(e:selectFirst("div.manga_row2"):selectFirst("a"),"abs:href"),
                Wrapper:text(e:select("div.genre"),""):gsub("_"," "),
                0,
                0,
                Wrapper:text(e:selectFirst("div.tags")),
                Wrapper:attr(e:selectFirst("img"),"src")
        ))
    end
    return list
end
function getPages(url,chapter) -- ArrayList<Page>
    local array=JSONArray.new(Wrapper:loadDocument(host.."/online/"..chapter.id..url:match("%d+(-.*)%.")):select("script"):toString():match("\"fullimg\":(.-),]").."]")
    local pages=ArrayList.new(array:length())
    for i=0,array:length()-1,1 do
        pages:add(Page.new(0,i+1,array:getString(i)))
    end
    return pages
end
function createAdvancedSearchOptions() --ArrayList<Options>
    local options=ArrayList.new()
    options:add(Options.new("Сортировка","desc","asc",convert(Sorts),0))
    options:add(Options.new("Жанры",convert(Genres),2))
    return options
end

function num(n) return n==nil and 0 or tonumber(n:match("[0-9]*%.?[0-9]+")) end

function convert(luaTable)
    local javaTable=Map_class.new()
    for key,value in pairs(luaTable) do javaTable:put(key,value) end
    return javaTable
end

function loadSimilar(wrapper)
    local elements=Wrapper:loadDocument(wrapper.url:match("(.*)manga/").."related"..wrapper.url:match("/[^/]*$")):select("div.related")
    local similar=ArrayList.new()
    for i=0,(elements~=nil and elements:size() or 0)-1,1 do
        local e=elements:get(i)
        if(e~=nil) then
            similar:add(Wrapper.new(
                    e:selectFirst("a"):attr("abs:href"),
                    0,
                    e:selectFirst("h2"):selectFirst("a"):attr("title"),
                    e:selectFirst("h2"):text(),
                    e:selectFirst("h3"):text(),
                    Wrapper:attr(e:selectFirst("h3"):selectFirst("a"),"abs:href"),
                    e:selectFirst("div.genre"):text(),
                    0,
                    0,
                    e:selectFirst("div.related_tag_list"):text(),
                    e:selectFirst("img"):attr("src")
            ))
        end
    end
    return similar
end