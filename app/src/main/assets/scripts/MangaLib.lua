---
--- Generated by Luanalysis
--- Created by Аlex Bayir.
--- DateTime: 09.01.2022 16:53
---
Chapter=luajava.bindClass("org.alex.kitsune.manga.Chapter")
Page=luajava.bindClass("org.alex.kitsune.manga.Page")
Options=luajava.bindClass("org.alex.kitsune.manga.search.Options")
JSONObject=luajava.bindClass("org.alex.json.JSON$Object")
JSONArray=luajava.bindClass("org.alex.json.JSON$Array")

version="1.4"
domain="mangalib.me"
source="MangaLib"
description="Один из самых популярных источников манги в СНГ."
host="https://"..domain
auth_tokens={"remember_web_59ba36addc2b2f9401580f014c7f58ea4e30989d"}

Sorts={["По рейтингу"]="rating_score", ["По количеству оценок"]="rate", ["По названию"]="name", ["По дате обновлениям"]="last_chapter_at",["По дате добавления"]="created_at",["По просмотрам"]="views",["По количеству глав"]="chap_count"}
sorts={[1]="rate",[2]="created_at",[3]="last_chapter_at"}
Order={["По убыванию"]="desc",["По возрастанию"]="asc"}
Genres={["Арт"]="32",["Боевик"]="34",["Боевые искусства"]="35",["Вампиры"]="36",["Гарем"]="37",["Гендерная интрига"]="38",["Героическое фэнтези"]="39",["Детектив"]="40",["Дзёсэй"]="41",["Драма"]="43",["Игра"]="44",["Исекай"]="79",["История"]="45",["Киберпанк"]="46",["Кодомо"]="76",["Комедия"]="47",["Махо-сёдзё"]="48",["Меха"]="49",["Мистика"]="50",["Научная фантастика"]="51",["Омегаверс"]="77",["Повседневность"]="52",["Постапокалиптика"]="53",["Приключения"]="54",["Психология"]="55",["Романтика"]="56",["Самурайский боевик"]="57",["Сверхъестественное"]="58",["Спорт"]="63",["Сэйнэн"]="64",["Сёдзё"]="59",["Сёдзё-ай"]="60",["Сёнэн"]="61",["Сёнэн-ай"]="62",["Трагедия"]="65",["Триллер"]="66",["Ужасы"]="67",["Фантастика"]="68",["Фэнтези"]="69",["Школа"]="70",["Эротика"]="71",["Этти"]="72",["Юри"]="73",["Яой"]="74"}
Tags={["Азартные игры"]="304",["Алхимия"]="225",["Амнезия / Потеря памяти"]="347",["Ангелы"]="226",["Антигерой"]="175",["Антиутопия"]="227",["Апокалипсис"]="228",["Армия"]="229",["Артефакты"]="230",["Боги"]="215",["Бои на мечах"]="231",["Борьба за власть"]="232",["Брат и сестра"]="233",["Будущее"]="234",["Ведьма"]="338",["Вестерн"]="235",["Видеоигры"]="185",["Виртуальная реальность"]="195",["Владыка демонов"]="236",["Военные"]="179",["Война"]="237",["Волшебники / маги"]="281",["Волшебные существа"]="239",["Воспоминания из другого мира"]="240",["Выживание"]="193",["ГГ женщина"]="243",["ГГ имба"]="291",["ГГ мужчина"]="244",["Геймеры"]="241",["Гильдии"]="242",["Глупый ГГ"]="297",["Гоблины"]="245",["Горничные"]="169",["Гяру"]="178",["Демоны"]="151",["Драконы"]="246",["Дружба"]="247",["Жестокий мир"]="249",["Животные компаньоны"]="250",["Завоевание мира"]="251",["Зверолюди"]="162",["Злые духи"]="252",["Зомби"]="149",["Игровые элементы"]="253",["Империи"]="254",["Квесты"]="255",["Космос"]="256",["Кулинария"]="152",["Культивация"]="160",["ЛГБТ"]="342",["Легендарное оружие"]="257",["Лоли"]="187",["Магическая академия"]="258",["Магия"]="168",["Мафия"]="172",["Медицина"]="153",["Месть"]="259",["Монстродевушки"]="188",["Монстры"]="189",["Музыка"]="357",["Навыки / способности"]="260",["Насилие / жестокость"]="262",["Наёмники"]="261",["Нежить"]="263",["Ниндзя"]="180",["Обмен телами"]="346",["Обратный Гарем"]="191",["Огнестрельное оружие"]="264",["Офисные Работники"]="181",["Пародия"]="265",["Пираты"]="340",["Подземелья"]="266",["Политика"]="267",["Полиция"]="182",["Преступники / Криминал"]="186",["Призраки / Духи"]="177",["Путешествие во времени"]="194",["Рабы"]="354",["Разумные расы"]="268",["Ранги силы"]="248",["Реинкарнация"]="148",["Роботы"]="269",["Рыцари"]="270",["Самураи"]="183",["Система"]="271",["Скрытие личности"]="273",["Спасение мира"]="274",["Спортивное тело"]="334",["Средневековье"]="173",["Стимпанк"]="272",["Супергерои"]="275",["Традиционные игры"]="184",["Умный ГГ"]="302",["Учитель / ученик"]="276",["Философия"]="277",["Хикикомори"]="166",["Холодное оружие"]="278",["Шантаж"]="279",["Эльфы"]="216",["Якудза"]="164",["Япония"]="280"}
Types={["Манга"]="1",["OEL-манга"]="4",["Манхва"]="5",["Маньхуа"]="6",["Руманга"]="8",["Комикс западный"]="9"}
Status={["Онгоинг"]="1",["Завершён"]="2",["Анонс"]="3",["Приостановлен"]="4",["Выпуск прекращён"]="5"}
Formats={["4-кома (Ёнкома)"]="1",["Сборник"]="2",["Додзинси"]="3",["В цвете"]="4",["Сингл"]="5",["Веб"]="6",["Вебтун"]="7"}

function update(url)
    local doc=network:load_as_Document(url)
    local json=JSONObject:create(doc:select("script"):toString():match("window.__DATA__ = (%b{})"))
    local ui=json:getObject("user"); if(ui) then ui=ui:get("id",-1); if(ui==-1) then ui=nil end end
    local jo=json:getObject("manga")
    local container=doc:selectFirst("div.media-container")
    local genres=container:select("a.media-tag-item") local str="" for i=0,genres:size()-1,1 do str=str..", "..genres:get(i):text() end genres=str:sub(3)
    local list=json:getObject("chapters"):getArray("list")
    local chapters=utils:to_list({})
    local branches=json:getObject("chapters"):getArray("branches")
    local translators={}
    for i=0,(branches~=nil and branches:size() or 0)-1,1 do
        local teams=branches:getObject(i):getArray("teams")
        for j=0,(teams~=nil and teams:size() or 0)-1,1 do
            local o=teams:getObject(j)
            translators[o:getInt("branch_id")]= o:getString("name")
        end
    end
    for i=list:size()-1,0,-1 do
        local o=list:getObject(i); local branch_id=o:get("branch_id",-1); if(branch_id==-1) then branch_id=nil end
        chapters:add(Chapter.new(o:get("chapter_volume"),o:get("chapter_number"),o:get("chapter_name"),utils:parseDate(o:get("chapter_created_at"),"yyyy-MM-dd' 'HH:mm:ss"),utils:to_map({["translator"]=translators[branch_id], ["bid"]=branch_id, ["ui"]=ui})))
    end
    local author=container:selectFirst("a[abs:href*=/people/]")
    return {
        ["url"]=url,
        ["url_web"]=url,
        ["name"]=jo:getString("name"),
        ["name_alt"]=jo:getString("rus_name"),
        ["author"]=author and {[utils:text(author)]=utils:attr(author,"abs:href")},
        ["genres"]=genres,
        ["rating"]=num(container:selectFirst("div.media-rating__value"):text()),
        ["description"]=utils:attr(container:selectFirst("div.media-section_info"):getElementsByAttributeValue("itemprop","description"):first(),"content"),
        ["thumbnail"]=container:selectFirst("div.media-sidebar__cover.paper"):selectFirst("img"):attr("src"),
        ["chapters"]=utils:uniqueChapters(chapters,true),
        ["similar"]=similar(container:select("div.media-slider__item"))
    }
end

function query(name,page,params)
    local url=network:url_builder(host.."/manga-list"):add("name",name):add("page",page+1)
    if(params~=nil and #params>0) then
        if(type(params[1])=="userdata" and Options:equals(params[1]:getClass())) then
            url:add("sort",params[1]:getSelected()[1])
            url:add("dir",params[1]:getTitleSortSelected())
            if(#params>1) then url:add("genres[include][]",params[2]:getSelected()):add("genres[exclude][]",params[2]:getDeselected()) end
            if(#params>2) then url:add("tags[include][]",params[3]:getSelected()):add("tags[exclude][]",params[3]:getDeselected()) end
            if(#params>3) then url:add("types[]",params[4]:getSelected()) end
            if(#params>4) then url:add("manga_status[]",params[5]:getSelected()) end
            if(#params>5) then url:add("format[include][]",params[6]:getSelected()):add("format[exclude][]",params[6]:getDeselected()) end
        else
            url:add("sort",sorts[params[1]])
        end
    end
    url=url:build()
    if(name~=nil and name:match("[a-z]://[^ >,;]*")~=nil) then url=name; end
    return query_url(url)
end

function query_url(url,page)
    if page then url=url:find("page=") and url:gsub("page=%d+","page="..tostring(page+1)) or url.."&page="..tostring(page+1) end
    print(url)
    local selects=network:load_as_Document(url):selectFirst("div.media-cards-grid"):select("div.media-card-wrap")
    local list={}
    for i=0,selects:size()-1,1 do
        local e=selects:get(i)
        local f=e:selectFirst("a.media-card")
        list[i]={
            ["url"]=f:attr("abs:href"),
            ["url_web"]=f:attr("abs:href"),
            ["name"]=utils:text(e:selectFirst("h3")),
            ["name_alt"]=utils:text(e:selectFirst("h3")),
            ["thumbnail"]=select(1,f:attr("data-src"):gsub("^/",host.."/"))
        }
    end
    return list
end

function getPages(url,chapter) -- table <Page>
    local scripts=network:load_as_Document(network:url_builder(url.."/v"..chapter["vol"].."/c"..chapter["num"]):add("page",1):add("bid",chapter["bid"]):add("ui",chapter["ui"]):build()):select("script")
    local json=JSONObject:create(scripts:toString():match("window.__info = (.-);"))
    local array=JSONArray:create(scripts:toString():match("window.__pg = (.-);"))
    local domain=json:getObject("servers"):getString("main").."/"..json:getObject("img"):getString("url")
    local pages={}
    for i=0,array:size()-1,1 do
        local jo=array:getObject(i)
        pages[i]=Page.new(jo:getInt("p"),domain..jo:getString("u"))
    end
    return pages
end

function createAdvancedSearchOptions() -- table <Options>
    return {
        Options.new("Сортировка","desc","asc",utils:to_map(Sorts),0),
        Options.new("Жанры",utils:to_map(Genres),2),
        Options.new("Теги",utils:to_map(Tags),2),
        Options.new("Типы",utils:to_map(Types),1),
        Options.new("Статус тайтла",utils:to_map(Status),1),
        Options.new("Формат",utils:to_map(Formats),2)
    }
end

function similar(elements)
    local similar={}; local n=0
    for i=0,(elements and elements:size() or 0)-1,1 do
        local e=elements:get(i):selectFirst("a")
        similar[n]=e and {
            ["url"]=e:attr("abs:href"),
            ["url_web"]=e:attr("abs:href"),
            ["name"]=e:attr("title"),
            ["name_alt"]=e:attr("title"),
            ["thumbnail"]=select(1,e:selectFirst("div.manga-list-item__cover"):attr("style"):match("url%((.*)%)"):gsub("^/",host.."/"))
        }
        n=n+(e and 1 or 0)
    end
    return similar
end