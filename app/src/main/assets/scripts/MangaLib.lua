---
--- Generated by Luanalysis
--- Created by Аlex Bayir.
--- DateTime: 09.01.2022 16:53
---
Wrapper=luajava.bindClass("org.alex.kitsune.manga.Wrapper")
Chapter=luajava.bindClass("org.alex.kitsune.manga.Chapter")
Page=luajava.bindClass("org.alex.kitsune.manga.Page")
Options=luajava.bindClass("org.alex.kitsune.manga.search.Options")
UrlBuilder=luajava.bindClass("org.alex.kitsune.commons.URLBuilder")
JSONObject=luajava.bindClass("org.json.JSONObject")
JSONArray=luajava.bindClass("org.json.JSONArray")
ArrayList=luajava.bindClass("java.util.ArrayList")
Map_class=luajava.bindClass("java.util.TreeMap")

version="1.2"
provider="mangalib.me"
providerName="MangaLib"
sourceDescription="Один из самых популярных источников манги в СНГ."
host="https://"..provider
auth_tokens={"remember_web_59ba36addc2b2f9401580f014c7f58ea4e30989d"}

Sorts={["По рейтингу"]="rate", ["По названию"]="name", ["По дате обновлениям"]="last_chapter_at",["По дате добавления"]="created_at",["По просмотрам"]="views",["По количеству глав"]="chap_count"}
sorts={[1]="rate",[2]="created_at",[3]="last_chapter_at"}
Order={["По убыванию"]="desc",["По возрастанию"]="asc"}
Genres={["Арт"]="32",["Боевик"]="34",["Боевые искусства"]="35",["Вампиры"]="36",["Гарем"]="37",["Гендерная интрига"]="38",["Героическое фэнтези"]="39",["Детектив"]="40",["Дзёсэй"]="41",["Драма"]="43",["Игра"]="44",["Исекай"]="79",["История"]="45",["Киберпанк"]="46",["Кодомо"]="76",["Комедия"]="47",["Махо-сёдзё"]="48",["Меха"]="49",["Мистика"]="50",["Научная фантастика"]="51",["Омегаверс"]="77",["Повседневность"]="52",["Постапокалиптика"]="53",["Приключения"]="54",["Психология"]="55",["Романтика"]="56",["Самурайский боевик"]="57",["Сверхъестественное"]="58",["Спорт"]="63",["Сэйнэн"]="64",["Сёдзё"]="59",["Сёдзё-ай"]="60",["Сёнэн"]="61",["Сёнэн-ай"]="62",["Трагедия"]="65",["Триллер"]="66",["Ужасы"]="67",["Фантастика"]="68",["Фэнтези"]="69",["Школа"]="70",["Эротика"]="71",["Этти"]="72",["Юри"]="73",["Яой"]="74"}
Tags={["Азартные игры"]="304",["Алхимия"]="225",["Амнезия / Потеря памяти"]="347",["Ангелы"]="226",["Антигерой"]="175",["Антиутопия"]="227",["Апокалипсис"]="228",["Армия"]="229",["Артефакты"]="230",["Боги"]="215",["Бои на мечах"]="231",["Борьба за власть"]="232",["Брат и сестра"]="233",["Будущее"]="234",["Ведьма"]="338",["Вестерн"]="235",["Видеоигры"]="185",["Виртуальная реальность"]="195",["Владыка демонов"]="236",["Военные"]="179",["Война"]="237",["Волшебники / маги"]="281",["Волшебные существа"]="239",["Воспоминания из другого мира"]="240",["Выживание"]="193",["ГГ женщина"]="243",["ГГ имба"]="291",["ГГ мужчина"]="244",["Геймеры"]="241",["Гильдии"]="242",["Глупый ГГ"]="297",["Гоблины"]="245",["Горничные"]="169",["Гяру"]="178",["Демоны"]="151",["Драконы"]="246",["Дружба"]="247",["Жестокий мир"]="249",["Животные компаньоны"]="250",["Завоевание мира"]="251",["Зверолюди"]="162",["Злые духи"]="252",["Зомби"]="149",["Игровые элементы"]="253",["Империи"]="254",["Квесты"]="255",["Космос"]="256",["Кулинария"]="152",["Культивация"]="160",["ЛГБТ"]="342",["Легендарное оружие"]="257",["Лоли"]="187",["Магическая академия"]="258",["Магия"]="168",["Мафия"]="172",["Медицина"]="153",["Месть"]="259",["Монстродевушки"]="188",["Монстры"]="189",["Музыка"]="357",["Навыки / способности"]="260",["Насилие / жестокость"]="262",["Наёмники"]="261",["Нежить"]="263",["Ниндзя"]="180",["Обмен телами"]="346",["Обратный Гарем"]="191",["Огнестрельное оружие"]="264",["Офисные Работники"]="181",["Пародия"]="265",["Пираты"]="340",["Подземелья"]="266",["Политика"]="267",["Полиция"]="182",["Преступники / Криминал"]="186",["Призраки / Духи"]="177",["Путешествие во времени"]="194",["Рабы"]="354",["Разумные расы"]="268",["Ранги силы"]="248",["Реинкарнация"]="148",["Роботы"]="269",["Рыцари"]="270",["Самураи"]="183",["Система"]="271",["Скрытие личности"]="273",["Спасение мира"]="274",["Спортивное тело"]="334",["Средневековье"]="173",["Стимпанк"]="272",["Супергерои"]="275",["Традиционные игры"]="184",["Умный ГГ"]="302",["Учитель / ученик"]="276",["Философия"]="277",["Хикикомори"]="166",["Холодное оружие"]="278",["Шантаж"]="279",["Эльфы"]="216",["Якудза"]="164",["Япония"]="280"}

function update(url) -- Wrapper
    local doc=Wrapper:loadDocument(url)
    local json=JSONObject.new(doc:select("script"):toString():match("window.__DATA__ = (%b{})"))
    local jo=json:getJSONObject("manga")
    local container=doc:selectFirst("div.media-container")
    local genres=container:select("a.media-tag-item") local str="" for i=0,genres:size()-1,1 do str=str..", "..genres:get(i):text() end genres=str:sub(3)
    local list=json:getJSONObject("chapters"):getJSONArray("list")
    local chapters=ArrayList.new(list:length())
    local branches=json:getJSONObject("chapters"):getJSONArray("branches")
    local translaters={}
    for i=0,(branches~=nil and branches:length() or 0)-1,1 do
        local jobj=branches:getJSONObject(i)
        local teams=jobj:getJSONArray("teams")
        for j=0,(teams~=nil and teams:length() or 0)-1,1 do
            jobj=teams:getJSONObject(j)
            translaters[jobj:getInt("branch_id")]=jobj:getString("name")
        end
    end
    for i=list:length()-1,0,-1 do
        local jobj=list:getJSONObject(i); local branch_id=jobj:optInt("branch_id")
        chapters:add(Chapter.new(jobj:getInt("chapter_id"),jobj:getInt("chapter_volume"),num(jobj:getString("chapter_number")),jobj:optString("chapter_name"), Wrapper:parseDate(jobj:optString("chapter_created_at"),"yyyy-MM-dd' 'HH:mm:ss"),translaters[branch_id],branch_id))
    end
    local author=container:selectFirst("div.media-info-list.paper"):getElementsContainingOwnText("Автор"):first()
    author=author~=nil and author:nextElementSibling():selectFirst("a") or nil
    return Wrapper.new(
            url,
            jo:getInt("id"),
            jo:getString("name"),
            jo:getString("rusName"),
            Wrapper:text(author),
            Wrapper:attr(author,"abs:href"),
            genres,
            num(container:selectFirst("div.media-rating__value"):text()),
            jo:optInt("status"),
            Wrapper:attr(container:selectFirst("div.media-section_info"):getElementsByAttributeValue("itemprop","description"):first(),"content"),
            container:selectFirst("div.media-sidebar__cover.paper"):selectFirst("img"):attr("src"),
            url,
            chapters,
            similar(container:select("div.media-slider__item"))
    )
end
function query(name,page,params) -- java.util.ArrayList<Wrapper>
    local url=UrlBuilder.new(host.."/manga-list")
    url:addParam("name",name)
    url:addParam("page",page+1)
    if(params~=nil and #params>0) then
        if(type(params[1])=="userdata" and Options:equals(params[1]:getClass())) then
            url:addParam("sort",params[1]:getSelected()[1])
            url:addParam("dir",params[1]:getTitleSortSelected())
            if(#params>1) then url:addParams("genres[include][]",params[2]:getSelected()):addParams("genres[exclude][]",params[2]:getDeselected()) end
            if(#params>2) then url:addParams("tags[include][]",params[3]:getSelected()):addParams("tags[exclude][]",params[3]:getDeselected()) end
        else
            url:addParam("sort",sorts[params[1]])
        end
    end
    url=url:getUrl()
    if(name~=nil and name:match("[a-z]://[^ >,;]*")~=nil) then url=name; end
    print(url)
    local selects=Wrapper:loadDocument(url):selectFirst("div.media-cards-grid"):select("div.media-card-wrap")
    local list=ArrayList.new(selects:size())
    for i=0,selects:size()-1,1 do
        local e=selects:get(i)
        local f=e:selectFirst("a.media-card")
        list:add(Wrapper.new(
                f:attr("abs:href"),
                num(f:attr("data-media-id")),
                Wrapper:text(e:selectFirst("h3")),
                Wrapper:text(e:selectFirst("h3")),
                nil,
                nil,
                nil,
                0,
                nil,
                nil,
                (select(1,f:attr("data-src"):gsub("^/",host.."/")))
        ))
    end
    return list
end
function getPages(url,chapter) -- ArrayList<Page>
    local scripts=Wrapper:loadDocument(url.."/v"..chapter.vol.."/c"..chapter.num.."?"..(chapter.branch_id>0 and "bid="..chapter.branch_id.."&" or "").."page=1"):select("script")
    local json=JSONObject.new(scripts:toString():match("window.__info = (.-);"))
    local array=JSONArray.new(scripts:toString():match("window.__pg = (.-);"))
    local domain=json:getJSONObject("servers"):getString("main").."/"..json:getJSONObject("img"):getString("url")
    local pages=ArrayList.new(array:length())
    for i=0,array:length()-1,1 do
        local jo=array:getJSONObject(i)
        pages:add(Page.new(0,jo:getInt("p"),domain..jo:getString("u")))
    end
    return pages
end
function createAdvancedSearchOptions() -- ArrayList<Options>
    local options=ArrayList.new()
    options:add(Options.new("Сортировка","desc","asc",convert(Sorts),0))
    options:add(Options.new("Жанры",convert(Genres),2))
    options:add(Options.new("Теги",convert(Tags),2))
    return options
end

function convert(luaTable)
    local javaTable=Map_class.new()
    for key,value in pairs(luaTable) do javaTable:put(key,value) end
    return javaTable
end

function num(n) return n==nil and 0 or tonumber(n:match("[0-9]*%.?[0-9]+")) end

function similar(elements)
    local similar=ArrayList.new()
    for i=0,(elements~=nil and elements:size() or 0)-1,1 do
        local e=elements:get(i):selectFirst("a")
        if(e~=nil) then
            similar:add(Wrapper.new(
                    e:attr("abs:href"),
                    0,
                    e:attr("title"),
                    e:attr("title"),
                    nil,
                    nil,
                    nil,
                    0,
                    nil,
                    nil,
                    (select(1,e:selectFirst("div.manga-list-item__cover"):attr("style"):match("url%((.*)%)"):gsub("^/",host.."/")))
            ))
        end
    end
    return similar
end