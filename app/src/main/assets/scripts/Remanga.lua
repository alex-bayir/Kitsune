---
--- Generated by Luanalysis
--- Created by Аlex Bayir.
--- DateTime: 09.01.2022 11:22
---
Wrapper=luajava.bindClass("org.alex.kitsune.manga.Wrapper")
Chapter=luajava.bindClass("org.alex.kitsune.manga.Chapter")
Page=luajava.bindClass("org.alex.kitsune.manga.Page")
Options=luajava.bindClass("org.alex.kitsune.manga.search.Options")
UrlBuilder=luajava.bindClass("org.alex.kitsune.commons.URLBuilder")
JSONObject=luajava.bindClass("org.json.JSONObject")
JSONArray=luajava.bindClass("org.json.JSONArray")
ArrayList=luajava.bindClass("java.util.ArrayList")
Map_class=luajava.bindClass("java.util.TreeMap")

version="1.2"
provider="remanga.org"
providerName="Remanga"
sourceDescription="Ещё один довольно популярный каталог манги."
host="https://api."..provider

Sorts={["По популярности"]="-rating", ["Новинки"]="-id", ["По обновлениям"]="-chapter_date",["По голосам"]="-votes",["По просмотрам"]="-views",["По количеству глав"]="-count_chapters"}
sorts={[1]="-rating",[2]="-id",[3]="-chapter_date"}
Genres={["Боевик"]="2", ["Боевые искусства"]="3", ["Гарем"]="5", ["Гендерная интрига"]="6", ["Героическое фэнтези"]="7", ["Детектив"]="8", ["Дзёсэй"]="9", ["Додзинси"]="10", ["Драма"]="11", ["Игра"]="12", ["История"]="13", ["Киберпанк"]="14", ["Кодомо"]="15", ["Комедия"]="50", ["Махо-сёдзё"]="17", ["Меха"]="18", ["Мистика"]="19", ["Научная фантастика"]="20", ["Повседневность"]="21", ["Постапокалиптика"]="22", ["Приключения"]="23", ["Психология"]="24", ["Романтика"]="25", ["Сверхъестественное"]="27", ["Сёдзё"]="28", ["Сёдзё-ай"]="29", ["Сёнэн"]="30", ["Сёнэн-ай"]="31", ["Спорт"]="32", ["Сэйнэн"]="33", ["Трагедия"]="34", ["Триллер"]="35", ["Ужасы"]="36", ["Фантастика"]="37", ["Фэнтези"]="38", ["Школа"]="39", ["Элементы юмора"]="16", ["Этти"]="40", ["Юри"]="41", ["Яой"]="43"}
Categories={["Веб"]="5",["В цвете"]="6",["Ёнкома"]="8",["Сборник"]="10",["Сингл"]="11",["Реинкарнация"]="13",["Зомби"]="14",["Демоны"]="15",["Кулинария"]="16",["Медицина"]="17",["Культивация"]="18",["Зверолюди"]="19",["Хикикомори"]="21",["Магия"]="22",["Горничные"]="23",["Мафия"]="24",["Средневековье"]="25",["Антигерой"]="26",["Призраки / Духи"]="27",["Гяру"]="28",["Военные"]="29",["Ниндзя"]="30",["Офисные работники"]="31",["Полиция"]="32",["Самураи"]="33",["Традиционные игры"]="34",["Видеоигры"]="35",["Преступники / Криминал"]="36",["Девушки-Монстры"]="37",["Монстры"]="38",["Музыка"]="39",["Обратный Гарем"]="40",["Выживание"]="41",["Путешествия во времени"]="43",["Виртуальная реальность"]="44",["Боги"]="45",["Эльфы"]="46",["Алхимия"]="47",["Ангелы"]="48",["Антиутопия"]="49",["Апокалипсис"]="50",["Армия"]="51",["Артефакты"]="52",["Борьба за власть"]="54",["Будущее"]="55",["Вестерн"]="56",["Владыка демонов"]="57",["Волшебные существа"]="59",["Воспоминания из другого мира"]="60",["Геймеры"]="61",["Гильдии"]="62",["ГГ женщина"]="63",["ГГ мужчина"]="64",["Гоблины"]="65",["Драконы"]="66",["Дружба"]="67",["Ранги силы"]="68",["Жестокий мир"]="69",["Животные компаньоны"]="70",["Завоевание мира"]="71",["Игровые элементы"]="73",["Квесты"]="75",["Космос"]="76",["Магическая академия"]="78",["Месть"]="79",["Навыки / способности"]="80",["Наёмники"]="81",["Насилие / жестокость"]="82",["Нежить"]="83",["Пародия"]="85",["Подземелья"]="86",["Политика"]="87",["Разумные расы"]="88",["Роботы"]="89",["Рыцари"]="90",["Система"]="91",["Стимпанк"]="92",["Скрытие личности"]="93",["Спасение мира"]="94",["Супергерои"]="95",["Учитель / ученик"]="96",["Философия"]="97",["Шантаж"]="99",["Лоли"]="108",["Тупой ГГ"]="109",["ГГ имба"]="110",["Умный ГГ"]="111",["Вампиры"]="112",["Оборотни"]="113",["Управление территорией"]="114",["Исекай"]="115",["Врачи / Доктора"]="116",["Аристократия"]="117",["Прокачка"]="118",["Амнезия / Потеря памяти"]="121",["Бои на мечах"]="122",["ГГ не человек"]="123",["Психодел-упоротость-Треш"]="124",["Грузовик-сан"]="125"}

function update(url) -- Wrapper
    local jo=JSONObject.new(Wrapper:loadPage(url)):get("content")
    if(JSONObject:equals(jo:getClass())) then
        local branch=jo:getJSONArray("branches"):getJSONObject(0)
        local count=branch:getInt("count_chapters")
        local chapters=ArrayList.new(count)
        for page=math.ceil(count/100),1,-1 do
            local list=JSONObject.new(Wrapper:loadPage(host.."/api/titles/chapters/?branch_id="..branch:getInt("id").."&count=100&page="..page)):getJSONArray("content")
            for i=list:length()-1,0,-1 do
                local jobj=list:getJSONObject(i); local p=jobj:getJSONArray("publishers") local str="" for j=0,p:length()-1,1 do str=str..", "..p:getJSONObject(j):getString("name") end p=str:sub(3)
                chapters:add(Chapter.new(jobj:getInt("id"),jobj:getInt("tome"),jobj:getDouble("chapter"),jobj:optString("name"), Wrapper:parseDate(jobj:getString("upload_date"),"yyyy-MM-dd'T'HH:mm:ss"),p))
            end
        end
        local genres=jo:getJSONArray("genres") local str="" for i=0,genres:length()-1,1 do str=str..", "..genres:getJSONObject(i):getString("name") end genres=str:sub(3)
        return Wrapper.new(
                url,
                jo:getInt("id"),
                jo:getString("en_name"),
                jo:getString("rus_name"),
                jo:getString("another_name"),
                nil,
                genres,
                jo:getDouble("avg_rating")/2,
                jo:getJSONObject("status"):getString("name"),
                jo:optString("description"),
                jo:getJSONObject("img"):getString("high"),
                "https://"..provider.."/manga/"..jo:getString("dir"),
                chapters
        )
    end
end
function query(name,page,params) -- java.util.ArrayList<Wrapper>
    local url=UrlBuilder.new(host.."/api/search"..(name==nil and "/catalog/" or "/"))
    url:addParam("query",name)
    url:addParam("page",page+1)
    if(params~=nil and #params>0) then
        if(type(params[1])=="userdata" and Options:equals(params[1]:getClass())) then
            url:addParam("ordering",params[1]:getSelected()[1])
            if(#params>1) then url:addParams("genres",params[2]:getSelected()) end
            if(#params>2) then url:addParams("categories",params[3]:getSelected()) end
        else
            url:addParam("ordering",sorts[params[1]])
        end
    end

    url=url:getUrl()
    print(url)
    local array=JSONObject.new(Wrapper:loadPage(url)):getJSONArray("content")
    local list=ArrayList.new(array:length())
    for i=0,array:length()-1,1 do
        local jo=array:get(i)
        list:add(Wrapper.new(
                host.."/api/titles/"..jo:getString("dir"),
                jo:getInt("id"),
                jo:getString("en_name"),
                jo:getString("rus_name"),
                nil,
                nil,
                nil,
                jo:getDouble("avg_rating")/2,
                nil,
                nil,
                host..jo:getJSONObject("img"):getString("high")
        ))
    end
    return list
end
function getPages(url,chapter) -- ArrayList<Page>
    local array=JSONObject.new(Wrapper:loadPage(url:sub(1,url:find("/[^/]*$")).."chapters/"..chapter.id)):getJSONObject("content"):getJSONArray("pages")
    local pages=ArrayList.new(array:length())
    for i=0,array:length()-1,1 do
        local jo=array:get(i)
        if(JSONObject:equals(jo:getClass())) then
            pages:add(Page.new(jo:getInt("id"),jo:getInt("page"),jo:getString("link")))
        else
            local d=jo:length()<10 and 10 or 100;
            for j=0,jo:length()-1,1 do
                local tmp=jo:getJSONObject(j)
                pages:add(Page.new(tmp:getInt("id"),tmp:getInt("page")+j/d,tmp:getString("link")))
            end
        end
    end
    return pages
end
function createAdvancedSearchOptions() -- ArrayList<Options>
    local options=ArrayList.new()
    options:add(Options.new("Сортировка",convert(Sorts),0))
    options:add(Options.new("Жанры",convert(Genres),1))
    options:add(Options.new("Категории",convert(Categories),1))
    return options
end

function convert(luaTable)
    local javaTable=Map_class.new()
    for key,value in pairs(luaTable) do javaTable:put(key,value) end
    return javaTable
end

function num(n) return n==nil and 0 or tonumber(n:match("[0-9]*%.?[0-9]+")) end

function loadSimilar(wrapper)
    local array=JSONObject.new(Wrapper:loadPage(wrapper.url.."/similar")):getJSONArray("content")
    local similar=ArrayList.new(array:length())
    for i=0,array:length()-1,1 do
        local jo=array:getJSONObject(i)
        similar:add(Wrapper.new(
                host.."/api/titles/"..jo:getString("dir"),
                jo:getInt("id"),
                jo:getString("en_name"),
                jo:getString("rus_name"),
                nil,
                nil,
                nil,
                jo:getDouble("avg_rating")/2,
                nil,
                nil,
                host..jo:getJSONObject("img"):getString("high")
        ))
    end
    return similar
end
